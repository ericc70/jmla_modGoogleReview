<?php
defined('_JEXEC') or die;

use Joomla\CMS\Http\HttpFactory;
use Joomla\CMS\Factory;
use Joomla\Registry\Registry;

class ModGoogleReviewsHelper
{
    /**
     * Récupère les avis Google pour un lieu donné avec mise en cache.
     *
     * @param Registry $params Paramètres du module.
     * @return array Tableau des avis ou un tableau d'erreurs.
     * @throws GoogleReviewsApiException
     */
    public static function getReviews(Registry $params): array
    {
        $cache = Factory::getCache('mod_googlereviews');
        $cacheId = md5(serialize($params->toArray())); // Identifiant unique basé sur les paramètres

        if ($cache->has($cacheId)) {
            return $cache->get($cacheId);
        }

        try {
            $config = self::createConfig($params);
            $reviews = self::fetchAndProcessReviews($config);
            $cache->set($cacheId, $reviews, 3600); // Cache pendant 1 heure (3600 secondes)
            return $reviews;
        } catch (GoogleReviewsApiException $e) {
            return ['error' => $e->getMessage()];
        }
    }

    /**
     * Crée un objet de configuration à partir des paramètres du module.
     *
     * @param Registry $params Paramètres du module.
     * @return object Objet de configuration.
     * @throws GoogleReviewsApiException
     */
    private static function createConfig(Registry $params): object
    {
        $apiKey = $params->get('api_key');
        $placeId = $params->get('place_id');
        $maxReviews = (int) $params->get('max_reviews', 5);

        if (empty($apiKey) || empty($placeId)) {
            throw new GoogleReviewsApiException('Veuillez configurer le module avec une clé API et un ID de lieu valides.');
        }

        return (object) [
            'apiKey' => $apiKey,
            'placeId' => $placeId,
            'maxReviews' => $maxReviews,
        ];
    }

    /**
     * Récupère et traite les avis Google.
     *
     * @param object $config Objet de configuration.
     * @return array Tableau des avis.
     * @throws GoogleReviewsApiException
     */
    private static function fetchAndProcessReviews(object $config): array
    {
        $url = "https://maps.googleapis.com/maps/api/place/details/json?place_id={$config->placeId}&fields=reviews&key={$config->apiKey}";
        $response = self::fetchData($url);
        $data = self::decodeJson($response);

        if (isset($data['status']) && $data['status'] !== 'OK') {
            $errorMessage = $data['error_message'] ?? 'Erreur inconnue';
            throw new GoogleReviewsApiException('Erreur de l\'API Google: ' . $errorMessage);
        }

        if (isset($data['result']['reviews'])) {
            return array_slice($data['result']['reviews'], 0, $config->maxReviews);
        }

        return ['error' => 'Aucun avis disponible pour ce lieu.'];
    }

    /**
     * Effectue une requête HTTP GET et retourne la réponse.
     *
     * @param string $url URL de la requête.
     * @return string Réponse de la requête.
     * @throws GoogleReviewsApiException
     */
    private static function fetchData(string $url): string
    {
        $http = HttpFactory::getHttp();
        $response = $http->get($url);

        if ($response->code !== 200) {
            throw new GoogleReviewsApiException("Erreur HTTP: {$response->code}");
        }

        return $response->body;
    }

    /**
     * Décode une chaîne JSON en tableau associatif.
     *
     * @param string $json Chaîne JSON.
     * @return array Tableau associatif.
     * @throws GoogleReviewsApiException
     */
    private static function decodeJson(string $json): array
    {
        try {
            return json_decode($json, true, 512, JSON_THROW_ON_ERROR);
        } catch (\JsonException $e) {
            throw new GoogleReviewsApiException('Erreur lors du décodage de la réponse JSON: ' . $e->getMessage());
        }
    }
}

/**
 * Exception personnalisée pour les erreurs de l'API Google Reviews.
 */
class GoogleReviewsApiException extends \Exception
{
}